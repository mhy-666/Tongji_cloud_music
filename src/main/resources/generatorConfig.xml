<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!--利用MyBatis Generator里面的Xml文件格式，复制成为resource的xml文件，并进行修改-->
<generatorConfiguration>
    <!--找到MySQL驱动包的路径-->
    <classPathEntry location="D:\apache-maven-3.6.1-bin\apache-maven-3.6.1\repo\mysql\mysql-connector-java\5.1.28\mysql-connector-java-5.1.28.jar" />
    <!--配置连接MySQL数据库的信息-->
    <context id="Mysql" targetRuntime="MyBatis3">
        <!--添加自定义的继承接口-->
        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <property name="mappers" value="tk.mybatis.mapper.common.Mapper,tk.mybatis.mapper.common.MySqlMapper"/>
            <property name="caseSensitive" value="true"/>
            <!--配置是否启用lombok, 支持如下6种注解-->
            <!--当配置 Data 后，Getter Setter ToString EqualsAndHashCode 会被忽略-->
            <property name="lombok" value="Getter,Setter,Data,ToString,Accessors,EqualsAndHashCode"/>
        </plugin>

        <plugin type="com.mhy.music.musicserver.util.ServiceAndControllerGeneratorPlugin" >
            <property name="targetProject" value="./src/main/java"/>
            <property name="servicePackage" value="com.mhy.music.musicserver.service"/>
            <property name="serviceImplPackage" value="com.mhy.music.musicserver.service.impl"/>
            <property name="controllerPackage" value="com.mhy.music.musicserver.controller"/>
            <!--UserService,该值则为Service-->
            <property name="serviceSuffix" value="Service"/>
            <!--Service接口的父接口-->
            <property name="superServiceInterface" value="org.aurochsframework.boot.commons.service.GeneralService"/>
            <!--ServiceImpl的父类-->
            <property name="superServiceImpl" value="org.aurochsframework.boot.commons.service.AbstractGeneralService"/>
            <!--controller的父类接口-->
            <property name="superController" value="org.aurochsframework.boot.commons.controller.GeneralCrudController"/>
        </plugin>

        <jdbcConnection driverClass="com.mysql.jdbc.Driver"
                        connectionURL="jdbc:mysql://localhost:3306/music"
                        userId="root"
                        password="Mhy651012/">
        </jdbcConnection>



        <!--会将数据库里的int类型数据转换为Java里的bigDecimals -->
        <javaTypeResolver >
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>
        <!--配置各个文件的相对路径和项目路径-->
        <!--产生实体类，需要和App是同级的-->


        <!-- 生成controller类地址 -->
        <javaControllerGenerator  targetPackage="com.mhy.music.musicserver.domain.controller" targetProject="src/main/java" >
        </javaControllerGenerator>

        <!-- 生成service类地址 -->
        <javaServiceGenerator targetPackage="com.mhy.music.musicserver.domain.service" targetProject="src/main/java" >
        </javaServiceGenerator>

        <javaModelGenerator targetPackage="com.mhy.music.musicserver.domain.entity" targetProject="src/main/java">
            <property name="enableSubPackages" value="true" />
            <property name="trimStrings" value="true" />
        </javaModelGenerator>
        <!--映射文件，一定是在resources中的-->
        <sqlMapGenerator targetPackage="mapper"  targetProject="src/main/resources">
            <property name="enableSubPackages" value="true" />
        </sqlMapGenerator>
        <!--底层dao-->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.mhy.music.musicserver.dao"  targetProject="src/main/java">
            <property name="enableSubPackages" value="true" />
        </javaClientGenerator>

        <!--将example类型设为false，否则实体类里面会多一个example的类exampleStudent -->
        <!--表明为数据库的表明，生成实体类Student，会自动生成到entity的目录中-->
        <table tableName="music_consumer" domainObjectName="MusicConsumer" enableCountByExample="false" enableDeleteByExample="false" enableSelectByExample="false" enableUpdateByExample="false">
        </table>


    </context>
</generatorConfiguration>
